/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010 Manfred Doudar, NICTA Ltd.
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
/////////////////////////////////////////////////////////////////////////////////////////////



Herein, a Computer Vision library under C++ Boost License, developed 
appropriately wrapping OpenCV with genericity in mind to facilitate 
computer-vision tasks without much of the boilerplate code often seen, 
in a type-safe manner, using modern C++ techniques and paradigms.  
The library is thread-safe and separates algorithm from implementation 
in policy-like fashion. Multiple image streams are handled with ease.

There are multiple sub-libraries in the package, primary are:

  - image library
  - video library
  - matrix library
  - thread library (wraps a good deal of Boost.Thread)
  - common utility libraries


Code tested and developed under Linux, using GCC.


Where to get it:

http://users.cecs.anu.edu.au/~manfredd/nvl++.tar.bz2
http://users.cecs.anu.edu.au/~manfredd/nvl++.zip


Examples for the curious:


=======================================
** Here's an example of face-detection:
=======================================


camera_device< > camera;
video_server< > server(camera);
video_client< > client(&server);

// algorithm
face_detect ftor("haarcascade_frontalface_alt.xml");

// run it
client(ftor);


===============================================
** Want to thread and connect multiple streams:
===============================================


using namespace boost;

controller< > ctrl1;
video_server< > server1(&ctrl1, "video1.avi");
video_server< > server2(&ctrl1, "video2.avi");
video_client< > client1(&ctrl1, &server1, &server2);
video_client< > client2(&ctrl1, &server1);

controller< > ctrl2;
video_server< > server3(&ctrl2, "video1.avi");
video_client< > client3(&ctrl2, &server3);

thread ctrl1_thd(ref(ctrl1));
thread ctrl2_thd(ref(ctrl2));
thread server1_thd(ref(server1));
thread server2_thd(ref(server2));
thread server3_thd(ref(server3));

// algorithm
play_stream< > ftor;

// run it
thread client1_thd(bind(&video_client< >::operator()<play_stream< > >,
                        cref(client1),
                        ref(ftor)));

// sync off server1 (redundant, only 1 server)
// play stream 2secs from now, then 800ms thereafter
posix_time::ptime now = posix_time::mircosec_clock::local_time();
thread client2_thd(bind(&video_client< >::operator()<play_stream< > >,
                        cref(client2),
                        cref(server1),
                        now + posix_time::seconds(2),
                        posix_time::milliseconds(800),
                        ref(ftor)));

// sync off server3 (redundant, only 1 server)
thread client3_thd(bind(&video_client< >::operator()<play_stream< > >,
                        cref(client3),
                        cref(server3),
                        now + posix_time::seconds(5),
                        posix_time::seconds(0),
                        ref(ftor)));

client3_thd.join();
client2_thd.join();
client1_thd.join();
ctrl2_thd.join();
ctrl1_thd.join();


===========================================
** Here's an example of algorithm chaining:
===========================================


- below we do histogram equalization on image stream,
  then we do phosphene rendering of the stream, and display

[note: I've not released either histeq or phosphene algorithms, but
library doco details how you'd write such algorithms of your own].


std::vector<variant< pipe::visitable<histeq::streamable> *
                   , pipe::visitable<phosphene::streamable> *
                   >
           > algo_stream;  

// histogram equalization algo
streamable::histeq_streamable<depth_8u, bgr_p> heq_stream;
algo_stream.push_back(&heq_stream);

// phosphene algo
streamable::phosphene_streamable<depth_8u, bgr_p>
            p_stream(gain_control,
                     gamma_correction,
                     x_count,
                     y_count);
algo_stream.push_back(&p_stream);

// set up the pipe
pipe::pipe_stream2< depth_8u
                  , bgr_p
                  , histeq::streamable< depth_8u
                                      , bgr_p
                                      >::base_type::result_type  
                  , pipe::visitable<histeq::streamable>
                  , depth_8u
                  , bgr_p
                  , pipe::display_tag::type
                  , pipe::visitable<phosphene::streamable>
                  , pipe::visitor
                  , std::vector
                  > pipe(std::move(algo_stream));  

camera_device< > camera;
video_server< > server(camera);
video_client< > client(&server);

// run it.. feed the pipe to client
client(pipe);





GETTING STARTED INSTRUCTIONS:
==================================================================================

1.  read  3rd-party/doc/README

2.  read  doc/README

3.  install all OpenCV dependencies

4.  install OpenCV from the source tar-ball provided in **THIS** release, found here:

       3rd-party/opencv-1.1.0_pre1.tar.bz2


3.  read  *.txt documentation for each library under directory `doc' for each of libraries:

       - image
       - video
       - nicta_common
       - thread
       - ocv_matrix
       - ocv_converters
       - image_header
       - avi_header
       - static_association
       - fwd

    ..all of which detail the API, and important information about assumptions made, and
    matters like setup of ENVIRONMENT VARIABLES and their purpose.

    For use and understanding of the Nicta libraries, a read of libraries `image' and `video'
    are a must for anyone before progressing any further.


4.  now you can install the Nicta libraries as explained in the file `INSTALL' at the top
    level directory.



***************************
NOTE:
***************************

The following libraries in this release are independent of OpenCV or any of its
dependencies, and can be used independently:

    - nicta_common          [*]
    - thread
    - static_association

The above named libraries depend only upon the C++ Standard Library, and C++ Boost Libraries;
and to repeat the above:  consequently, you can use these libraries independently of anything
else in this release.


[*] if you want to use anything from sound.{h,cc} you will need 3rd-party open-source package
    `flite' installed on your system; which is a cut-down version of `festival' for facilitating
    text-to-speech.



All other libraries, either directly or indirectly depend upon OpenCV and its dependencies;
namely:

    - image
    - video
    - ocv_matrix
    - ocv_converters
    - image_header
    - avi_header
    - fwd




OPERATING SYSTEMS/ PLATFORMS:
==================================================================================

I only do Unix/Linux, and C++.

I do NOT do Apple-Mac, or MS-Windows, so please don't ask me about these.

The work here in this release is aimed at standards conformance, so it's more than 
likely that these libraries will work under your platform of choice, on the proviso
that you have a sufficiently standards conforming C++ compiler!

I will not undertake work (if that is needed) to target other than Unix/Linux
platforms.  If however, someone else is prepared to do the work, by all means ..you 
are welcome to do so.  




SUPPORT:
==================================================================================

I tend to be a busy guy, but am open to answering questions, provide help, and guidance
where I can.

Before you ask, be sure to search the web for answers, ask your peers, ask from others
nearby:

- If you need help with C++, your best source for help is comp.lang.c++.moderated

- If you need help with C++ Boost, try the boost.users or boost.devel newsgroups

- If you need help with OpenCV, I think there is an OpenCV newsgroup - no, I am not a member,
  and nor do I read or follow that group


If you are to throw questions my way, be sure to provide sufficient detail in your emails, 
and that your sentences parse into proper and understandable english, and ensure your ideas
are well thought out.

If you spot any bugs or suggestions, also feel free to contact me.


You can report bugs, report errors, ask for help, raise queries, need consultancy services, 
or even simply to let me know what you think of the libraries in this release, you can 
contact me at:

    Manfred Doudar <libnvl@gmail.com>


I would be happy if the community bands together, and creates some kind of support group
of their own, even take to develop the libraries herein further.  It would be great if
the libraries herein, and community can influence direction, and quality of what comes
out of future OpenCV releases.




FUTURE WORK:
==================================================================================

For each library herein, I've detailed where likely, future efforts may (or should be addressed).

When I would have chance to do more work on these libraries, I don't know, but would be very
happy to hear if the community itself takes charge and further develops and maintains these
libraries further.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


